package ex1_innerclass;
/*
 * 내부 클래스
 * 
 * 내부 클래스는 클래스 안에 만들어진 또 다른 클래스로 중첩 클래스라고도 부른다.
 * 클래스에 다른 클래스를 선언하는 이유는 두 개의 클래스가 서로 긴밀한 관계를 맺고 있기 때문이다.
 * 
 * -내부 클래스의 장점
 * 
 * 두 클래스 멤버들 간에 손쉽게 접근 가능
 * 불필요한 클래스를 감춰 코드의 복잡성을 줄임
 * 
 * -내부 클래스의 종류
 * 1. 인스턴스 클래스
 * 	외부 클래스의 멤버 변수와 같은 위치에 선언
 * 	주로 외부 클래스의 멤버 변수와 관련된 작업에 사용할 목적으로 선언
 * 2. 정적 클래스
 * 	외부 클래스의 클래스 변수와 같이 static 키워드 부여
 * 3. 지역 클래스
 * 	외부 클래스의 메서드 내부에서 선언하여 사용
 * 	메서드 영역에서 선언되어 메서드 내부에서만 사용 가능

 * - 인스턴스 클래스
 * 
 * 외부 클래스 내부에서 생성하고 선언되어 사용하느 클래스
 * 필드와 같은 위치에 선언하며 외부 클래스의 필드처럼 다뤄진다.
 * 주로 외부클래스의 멤버들관련된 작업에 사용할 목적으로 선언
 * --public class Outer{
 * 		private String name; //필드
 * 
 * 		public class inner{
 * 				private int num;
 * 		}
 *}
 *
 *내부 클래스도 외부 클래스 안에 생성되는 것 외에는 별도의 클래스기 때문에
 *파일이 컴파일되면 별도로 생성된다.
 *
 *-인스턴스 클래스의 객체화
 *
 *인스턴스 클래스는 기본적인 내부클래스이다.
 *외부 클래스 안에 생성되기 때문에 클래스를 사용하려면 
 *외부 클래스 객체가 생성된 상태에서 객체 생성을 할 수 있다.
 *
 *Outer outer = new Outer();
 *Outer.inner in = outer.new inner();
 *
 *
 *-지역클래스
 *
 *외부클래스의 메서드 내에서 선언되어 사용하는 클래스
 *메서드 내에서 선언되어 메서드 내에서만 사용 가능
 *메서드의 실행이 끝나면 해당 클래스도 사용이 종료됨.
 *
 *-지역 클래스의 접근 제한
 *
 *지역 클래스는 메서드 내에서 선언되어 사용한다.
 *보통 메서드가 종료되면 클래스도 함께 종료되지만 
 *메서드와 실행되는 위치가 다르기 때문에 종료되지 않고 남아있을 수 있다.
 *따라서 지역클래스에서 메서드 내의 변수를 사용할 때는 복사해 사용한다.
 *이러한 이유로 지역클래스에서 메서드의 변수를 사용할 때 해당 변수가 변경되면 오류가 발생한다. 
 *
 *-익명 클래스
 *
 *다른 내부 클래스완 달리 이름이 없는 클래스를 의미
 *익명 클래스는 클래스의 선언과 객체의 생성을 동시에 하므로 한 번만 사용 가능
 *오직 하나의 객체만을 생성할 수 있는 일회용 클래스이다.
 *따라서 생성자를 선언할 수 없으며 둘 이상의 인터페이스를 구현할 수 없다.
 */
public class dfg {

}
