package ex3_try_catch;
/*
 * 예외처리
 * 
 * 에러와 예외
 * 자바 프로그램을 실행하다보면 갑자기 프로그램이 종료되거나 오류메시지가 나타나는 등
 * 예기치 못한 오류가 발생한다.
 * 전자는 해결할 수 없는 시스템에러가 발생한 것이고 
 * 후자는 발생한 오류를 개발자거 처리해 메시지가 출력된 것이다.
 * 
 * -에러
 * 
 * 시스템에 비정상적 상황이 생겼을 때 발생
 * 외부요인일 수도 있고 프로그램 구동 중 발생하는 치명적 오류일 수도 있다.
 * 이런 에러들은 개발자가 예측하거나 처리할 수 없는 영역이다.
 * 
 * 		에러의종류					상황
 * OutofMemoryError		프로그램 실행 중 메모리 부족
 * IOError				입출력 에러
 * StackOverFlowError	가용 메모리 부족 현상
 * 
 * -예외
 * 
 * 대체로 프로그램 구동 중 나타나는 오류를 말한다.
 * 문법적으론 문제가 없어보이지만 실제 운영 중 생기는 문제들이다.
 * 체크 예외와 비체크 예외 두 가지가 있다.
 * 
 * -체크 예외
 * 
 * 자바 소스를 컴파일하는 과정에서 검사
 * 문법적으로 강제해 예외 처리를 해야 하는 경우
 * 
 * -비체크 예외
 * 
 * 컴파일 과정에서 검사하지 않으므로 사용자의 경험이나 테스트로 찾아야 하는 경우
 * 
 * -예외 처리 문법
 * 
 * 예외가 발생했을 때 처리하는 것
 * 
 * -예외 처리 과정
 * 
 * 1. 코드 진행 중 예외가발생하면 jvm에게 알린다.
 * 2. jvm은 발생한 예외를 분석하여 알맞은 예외 클래스를 생성한다.
 * 3. 생성된 예외 객체를 발생한 지점으로 보낸다.
 * 4. 예외가 발생한 지점에서 처리하지 않으면 프로그램은 비정상 종료된다.
 * 
 * -try catch 구문
 * 
 * 예외를 처리하는 가장 기본 문법은 try-catch문이다.
 * 예외가 발생할 가능성이 있는 코드는 try{}블럭 안에 작성하고
 * catch메서드는 시스템으로부터 넘어오는 예외 클래스를 받아서 처리한다.
 * 
 * try{
 * 		예외가 발생할 가능성이 있는 코드
 * } catch(예외 클래스명 e){
 * 		예외처리코드
 * } 
 */
public class sdf {

}
